#!/usr/bin/env python

PACKAGE = "potential_gap"
from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator, int_t, double_t, bool_t

gen = ParameterGenerator()

gen.add("min_resoln", int_t, 0, "Min Resoln idx of Gaps", 2, 1, 512)
gen.add("gap_diff", double_t, 0, "Threshold value for mergeing gaps", 0.1, 0, 3)
gen.add("global_plan_lookup_increment", int_t, 0, "Increment for selecting poses along " +
    "global path", 75, 0, 500)
gen.add("goal_tolerance", double_t, 0, "Tolerance for goal checking", 0.2, 0, 1)
gen.add("waypoint_tolerance", double_t, 0, "Tolerance for goal checking", 0.1, 0, 1)
gen.add("global_plan_change_tolerance", double_t, 0, "Tolerance for check if " +
    "global plan has changed", 0.1, 0, 1)
gen.add("follow_the_gap_vis", bool_t, 0, "Toggle for performing FGM gap parsing", True)
gen.add("close_gap_vis", bool_t, 0, "Toggle for performing close gap parsing", True)
gen.add("debug_viz", bool_t, 0, "Toggle for all visualization", True)
gen.add("axial_convert", bool_t, 0, "Axial Gap Conversion", True)

gen.add("epsilon2", double_t, 0, "Epsilon2 value in axial gap conversion", 0.18, 0, 1)
gen.add("epsilon1", double_t, 0, "Epsilon1 value in axial gap conversion", 0.18, 0, 1)
gen.add("rot_ratio", double_t, 0, "Small offset to make local waypoint absolutely visible", 1.5, 0, 10)

gen.add("sigma", double_t, 0, "Sigma value in gap vector field", 0.3, 0, 1000)

gen.add("niGen_s", bool_t, 0, "Toggle for using NI trajectory", True)
gen.add("config_sanity_val", int_t, 0, "Sanity Check for configure at launch", 1, 0, 512)
gen.add("ctrl_ahead_pose", int_t, 0, "Number of ahead poses to skip for NI ctrl", 1, 0, 50)

gen.add("reduction_threshold", double_t, 0, "threshold value for gap reduction", 3.1415926, 0, 6.283)
gen.add("reduction_target", double_t, 0, "target value for gap reduction", 1.5707963, 0, 6.283)

gen.add("viz_jitter", double_t, 0, "Displacement for visualization about overlapping location", 0.05, 0, 1)

gen.add("num_feasi_check", int_t, 0, "Poses for feasibility check", 20, 0 , 50)

gen.add("k_drive_x", double_t, 0, "Control gain for x", 0.5, 0.01 , 100)
gen.add("k_drive_y", double_t, 0, "Control gain for y", 3.5, 0.01 , 100)
gen.add("k_turn", double_t, 0, "Control gain for turn", 0.5, 0.01 , 100)
gen.add("k_po", double_t, 0, "Scale for projection operator", 1., 0.01 , 100)
gen.add("k_po_turn", double_t, 0, "Scale for projection operator", 1., 0.01 , 100)
gen.add("v_ang_const", double_t, 0, "Const ang velocity", 0, 0 , 5)
gen.add("v_lin_x_const", double_t, 0, "Const x velocity", 0.0, 0 , 1)
gen.add("v_lin_y_const", double_t, 0, "Const y velocity", 0.0, 0 , 1)
gen.add("vx_absmax", double_t, 0, "absolute max vel", 0.5, 0, 2)
gen.add("vy_absmax", double_t, 0, "absolute max vel", 0.5, 0, 2)
gen.add("ang_absmax", double_t, 0, "absolute max angular vel", 0.2, 0, 2)

gen.add("inf_ratio", double_t, 0, "Ratio of inscribed r for infinity range", 1.2, 0, 4)
gen.add("terminal_weight", double_t, 0, "Weight for Terminal Cost", 10, 0, 100)
gen.add("orient_weight", double_t, 0, "Weight for Orientation Cost", 1, 0, 100)
gen.add("waypoint_ratio", double_t, 0, "Ratio of robot radius to push inward for placing a waypoint in a gap", 1.5, 0, 10)

gen.add("r_min", double_t, 0, "r min", 0.5, 0.01, 5)
gen.add("r_norm", double_t, 0, "r norm", 1., 0.01, 5)
gen.add("r_norm_offset", double_t, 0, "r norm offset for r max", 0.5, 0.01, 5)

gen.add("max_idx_diff", int_t, 0, "Max dist for merging gaps", 256, 1 , 511)
gen.add("radial_extend", bool_t, 0, "Toggle Radial Extension", True)

gen.add("inflated_gap", bool_t, 0, "Toggle Inflated Gap", True)
gen.add("inflated_gap_scale", double_t, 0, "scale for inflated gap", 1.2, 1, 2)

gen.add("feasi_inflated", bool_t, 0, "Feasibility Checking using Inflated", True)
gen.add("projection_inflated", bool_t, 0, "Projection Operator using inflated", True)
gen.add("planning_inflated", bool_t, 0, "Planning using inflated", False)
gen.add("far_feasible", bool_t, 0, "Pick The Farthest Feasible Local Waypoint", True)

gen.add("use_bezier", bool_t, 0, "Use the bezier trajectory generation", True)

gen.add("fig_gen", bool_t, 0, "Visualize for Figure", False)

gen.add("holonomic", bool_t, 0, "Holonomic robots", False)
gen.add("full_fov", bool_t, 0, "Full field of view robots", False)
gen.add("projection_operator", bool_t, 0, "Projection Operator", True)

gen.add("synthesized_frame",    bool_t,   0, "True to synthesize trajectory in the same frame as sensor", True)
gen.add("scale",                double_t, 0, "Projection Operator", 1., 0.01, 50)
gen.add("integrate_maxt",       double_t, 0, "Projection Operator", 500., 0.0, 1000)
gen.add("integrate_stept",      double_t, 0, "Projection Operator", 0.01, 0.000001, 100)
gen.add("rmax",                 double_t, 0, "Rmax", 0.5, 0, 100)

gen.add("r_inscr", double_t, 0, "Inscribed Radius", 0.18, 0, 10)

gen.add("man_ctrl", bool_t, 0, "Manual control", False)
gen.add("man_x", double_t, 0, "Manual control", 0, 0, 10)
gen.add("man_y", double_t, 0, "Manual control", 0, -10, 10)
gen.add("man_theta", double_t, 0, "Manual control", 0, 0, 10)
gen.add("line", bool_t, 0, "Line", False)

gen.add("bezier_cp_scale", double_t, 0, "The scale for the second control vector", 1, 0.5, 10)
gen.add("robot_geo_scale", double_t, 0, "The scale for the bezier robot geometry", 1.1, 0.5, 10)
gen.add("bezier_interp", bool_t, 0, "Interpolate bezier curve", True)
gen.add("bezier_unit_time", double_t, 0, "The time for two consecutive points", 0.1, 0.01, 1)
exit(gen.generate(PACKAGE, PACKAGE, "pg"))
